// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20201226171643_add_order_category_type")]
    partial class add_order_category_type
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DAL.Models.Customer", b =>
                {
                    b.Property<int>("CustomerPK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerPK");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.Property<int>("OrderPK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CategoryOrderCategoryPK")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerPK")
                        .HasColumnType("int");

                    b.Property<double>("InitialOrderCost")
                        .HasColumnType("float");

                    b.Property<double>("MonthlyCost")
                        .HasColumnType("float");

                    b.Property<string>("OrderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderPK");

                    b.HasIndex("CategoryOrderCategoryPK");

                    b.HasIndex("CustomerPK");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DAL.Models.OrderCategory", b =>
                {
                    b.Property<int>("OrderCategoryPK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("OrderCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderCategoryPK");

                    b.ToTable("OrderCategories");
                });

            modelBuilder.Entity("DAL.Models.OrderPayment", b =>
                {
                    b.Property<int>("OrderPaymentPK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderPK")
                        .HasColumnType("int");

                    b.Property<double>("PaymentSum")
                        .HasColumnType("float");

                    b.HasKey("OrderPaymentPK");

                    b.HasIndex("OrderPK");

                    b.ToTable("OrderPayments");
                });

            modelBuilder.Entity("DAL.Models.Position", b =>
                {
                    b.Property<int>("PositionPK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("HourlyPremium")
                        .HasColumnType("float");

                    b.Property<string>("PositionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionPK");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("DAL.Models.Project", b =>
                {
                    b.Property<int>("ProjectPK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("OrderPK")
                        .HasColumnType("int");

                    b.Property<int>("PlannedDuration")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectComplexityTypePK")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectPK");

                    b.HasIndex("OrderPK");

                    b.HasIndex("ProjectComplexityTypePK");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DAL.Models.ProjectComplexityType", b =>
                {
                    b.Property<int>("ProjectComplexityTypePK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ProjectComplexityTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectComplexityTypePK");

                    b.ToTable("ProjectComplexityTypes");
                });

            modelBuilder.Entity("DAL.Models.ProjectPerformer", b =>
                {
                    b.Property<int>("ProjectPerformerPK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("PerformerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ProjectPK")
                        .HasColumnType("int");

                    b.HasKey("ProjectPerformerPK");

                    b.HasIndex("PerformerId");

                    b.HasIndex("ProjectPK");

                    b.ToTable("ProjectPerformers");
                });

            modelBuilder.Entity("DAL.Models.ProjectPerformerHistory", b =>
                {
                    b.Property<int>("ProjectPerformerHistoryPK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ProjectPerformerPK")
                        .HasColumnType("int");

                    b.Property<double>("SpentHours")
                        .HasColumnType("float");

                    b.Property<DateTime>("WorkDay")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectPerformerHistoryPK");

                    b.HasIndex("ProjectPerformerPK");

                    b.ToTable("ProjectPerformerHistories");
                });

            modelBuilder.Entity("DAL.Models.Qualification", b =>
                {
                    b.Property<int>("QualificationPK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("HourlyRate")
                        .HasColumnType("float");

                    b.Property<string>("QualificationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QualificationPK");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "e7c5d9a6-2584-4ace-86df-559a8480f978",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77a542b6-183f-43cd-87ea-b68156763e1d",
                            Email = "tarikkataryna1999@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Taras",
                            LastName = "Kataryna",
                            LockoutEnabled = false,
                            Login = "tarikkataryna1999@gmail.com",
                            NormalizedUserName = "TARIKKATARYNA1999@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIjuYGyuj3Qn/H6aXXYTBo5MjVV/TsaJ4xNCoYu0pzB0knyqwc6cFZNKKnOIv3H9+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "260b213f-2bd0-4c57-ad4b-d068a64a2d8b",
                            TwoFactorEnabled = false,
                            UserName = "tarikkataryna1999@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1ba68bf3-7f4c-45a6-ab5b-7e9be54e3e47",
                            ConcurrencyStamp = "fdd41c7d-4879-42d3-a5eb-dc2f28921cd6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2a7f0297-c806-4192-95a4-f3be699c4420",
                            ConcurrencyStamp = "c066d625-dcfc-4e03-a036-045f336c0dae",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "e7c5d9a6-2584-4ace-86df-559a8480f978",
                            RoleId = "1ba68bf3-7f4c-45a6-ab5b-7e9be54e3e47"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Models.Performer", b =>
                {
                    b.HasBaseType("DAL.Models.User");

                    b.Property<int?>("PositionPK")
                        .HasColumnType("int");

                    b.Property<int?>("QualificationPK")
                        .HasColumnType("int");

                    b.HasIndex("PositionPK");

                    b.HasIndex("QualificationPK");

                    b.HasDiscriminator().HasValue("Performer");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.HasOne("DAL.Models.OrderCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryOrderCategoryPK");

                    b.HasOne("DAL.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerPK");

                    b.Navigation("Category");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DAL.Models.OrderPayment", b =>
                {
                    b.HasOne("DAL.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderPK");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Models.Project", b =>
                {
                    b.HasOne("DAL.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderPK");

                    b.HasOne("DAL.Models.ProjectComplexityType", "ProjectComplexityType")
                        .WithMany()
                        .HasForeignKey("ProjectComplexityTypePK");

                    b.Navigation("Order");

                    b.Navigation("ProjectComplexityType");
                });

            modelBuilder.Entity("DAL.Models.ProjectPerformer", b =>
                {
                    b.HasOne("DAL.Models.User", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId");

                    b.HasOne("DAL.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectPK");

                    b.Navigation("Performer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DAL.Models.ProjectPerformerHistory", b =>
                {
                    b.HasOne("DAL.Models.ProjectPerformer", "ProjectPerformer")
                        .WithMany()
                        .HasForeignKey("ProjectPerformerPK");

                    b.Navigation("ProjectPerformer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Performer", b =>
                {
                    b.HasOne("DAL.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionPK");

                    b.HasOne("DAL.Models.Qualification", "Qualification")
                        .WithMany()
                        .HasForeignKey("QualificationPK");

                    b.Navigation("Position");

                    b.Navigation("Qualification");
                });
#pragma warning restore 612, 618
        }
    }
}
